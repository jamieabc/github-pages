<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020 on Cognition Limits Imagination</title>
    <link>/categories/2020/</link>
    <description>Recent content in 2020 on Cognition Limits Imagination</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Aug 2020 15:48:42 +0800</lastBuildDate>
    
	<atom:link href="/categories/2020/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 1547 (1)</title>
      <link>/posts/leetcode-1547-1/</link>
      <pubDate>Mon, 10 Aug 2020 15:48:42 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-1/</guid>
      <description>This article is to write down some notes while solving thie problem.
Greedy I started with this example:
 n = 7, cuts = [1,3,4,5]
   initial status:
 _ _ _ _ _ _ _ 0 7    first cut at 3:
 _ _ _ _ | _ _ _ _ _ 0 3 3 7  cost: 7 (because total length before cut is 7)</description>
    </item>
    
    <item>
      <title>Raise Coverate Rate to 80</title>
      <link>/posts/raise-coverate-rate-to-80/</link>
      <pubDate>Sun, 08 Mar 2020 17:25:34 +0800</pubDate>
      
      <guid>/posts/raise-coverate-rate-to-80/</guid>
      <description>Recently I have done raising unit tests coverage rate of 2 packages to at least 80%. Of course, high coverage rate isn&amp;rsquo;t always a gold standard to achieve, and some corner conditions are not necessray to test, so 80% seems a number that tries to demonstrate most code paths are testable.
These 2 packges with 0% and 20% unit test coverate rate at the time I started to modify. After some refactoring, both packages&amp;rsquo; coverage rate reaches 80%.</description>
    </item>
    
  </channel>
</rss>