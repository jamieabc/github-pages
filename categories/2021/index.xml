<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021 on Cognition Limits Imagination</title>
    <link>/categories/2021/</link>
    <description>Recent content in 2021 on Cognition Limits Imagination</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Jun 2021 21:58:12 +0800</lastBuildDate>
    
	<atom:link href="/categories/2021/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hyrum&#39;s Law</title>
      <link>/posts/hyrum-law/</link>
      <pubDate>Wed, 16 Jun 2021 21:58:12 +0800</pubDate>
      
      <guid>/posts/hyrum-law/</guid>
      <description>這章在講 scalability，裡面提到一個概念 Hyrum&amp;rsquo;s Law (Hyrum 是 Google 工程師):
 With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.
 這段話大意是任何提供給外部系統的 API，不論文件上如何寫，任何可被觀測的行為最終都會被某種方式所依賴。有點繞口，書上舉的例子是 hash table，幾乎所有工程師都知道 hash table 內儲存物件的順序是不固定的，所以程式執行不該依賴於 hash table 所提供的順序。
我在這部影片中聽到原作者的另一個例子：在某個 c++ 的 header file 裡面加了一行註解，導致測試壞掉……how could that happen? 原來是有人把測試寫死在程式執行到第幾行的時候，所以新增註解導致錯誤。
愈多人使用 API 代表提供愈高的價值，但因為愈多人使用也促使這隻 API 的 dependency 愈高，反而阻止了 API 更新。</description>
    </item>
    
  </channel>
</rss>