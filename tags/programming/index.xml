<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Cognition Limits Imagination</title>
    <link>/tags/programming/</link>
    <description>Recent content in Programming on Cognition Limits Imagination</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Aug 2020 20:25:19 +0800</lastBuildDate>
    
	<atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 1552 (2)</title>
      <link>/posts/leetcode-1552-2/</link>
      <pubDate>Tue, 25 Aug 2020 20:25:19 +0800</pubDate>
      
      <guid>/posts/leetcode-1552-2/</guid>
      <description>This article tries to write down some notes while trying to solve problem 1552.
After some days of thinking, I finally understand why this is a binary search problem.
Thinking Didn&amp;rsquo;t think of binary search because I miss some details about this problem:
 To get maximum of minimum distance among selected numbers, smallest &amp;amp; largest numbers will definited being selected, because choosing them provides maximum range to distribute distance.    Once smallest &amp;amp; largest numbers are selected, theoretically maximum distance could be upper bounded to (largest - smallest) / (selected - 1)</description>
    </item>
    
    <item>
      <title>Leetcode 1552 (1)</title>
      <link>/posts/leetcode-1552-1/</link>
      <pubDate>Fri, 21 Aug 2020 20:19:13 +0800</pubDate>
      
      <guid>/posts/leetcode-1552-1/</guid>
      <description>This article tries to write down some notes while trying to solve problem 1552.
I think this problem can be restated as follows: given some positive integers with total size n, pick m numbers such that minimum distance among each selected is maximum.
When first see this problem, I think it&amp;rsquo;s a knapsack problem: every number will be selected or not, find those possible combinations (pick m from n), calculate minimum distance, choose maximum from them.</description>
    </item>
    
    <item>
      <title>Leetcode 1547 (2)</title>
      <link>/posts/leetcode-1547-2/</link>
      <pubDate>Sat, 15 Aug 2020 12:43:05 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-2/</guid>
      <description>Thinking After brute force to find a solution and think about this proble, I have some other observations.
Initially I have the idea to choosing closest middle cut in range, and it fails to guarantee always global optimal result.
More specifically, the heuristic fails at this test case: n = 30, cuts = [5, 7, 13, 15, 18, 25, 26, 29]
According to find closest middle cut, it will choose 15 as first cut since it&amp;rsquo;s the the half of 30, and best min cuts under 15 is 94, one of the possible outcome is [15, 7, 5, 13, 25, 26, 29, 18]</description>
    </item>
    
    <item>
      <title>Leetcode 1547 (1)</title>
      <link>/posts/leetcode-1547-1/</link>
      <pubDate>Mon, 10 Aug 2020 15:48:42 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-1/</guid>
      <description>This article is to write down some notes while solving this problem.
Greedy I started with this example:
 n = 7, cuts = [1,3,4,5]
   initial status:
 _ _ _ _ _ _ _ 0 7    first cut at 3:
 _ _ _ _ | _ _ _ _ _ 0 3 3 7  cost: 7 (because total length before cut is 7)</description>
    </item>
    
    <item>
      <title>Raise Coverate Rate to 80</title>
      <link>/posts/raise-coverate-rate-to-80/</link>
      <pubDate>Sun, 08 Mar 2020 17:25:34 +0800</pubDate>
      
      <guid>/posts/raise-coverate-rate-to-80/</guid>
      <description>Recently I have done raising unit tests coverage rate of 2 packages to at least 80%. Of course, high coverage rate isn&amp;rsquo;t always a gold standard to achieve, and some corner conditions are not necessray to test, so 80% seems a number that tries to demonstrate most code paths are testable.
These 2 packges with 0% and 20% unit test coverate rate at the time I started to modify. After some refactoring, both packages&amp;rsquo; coverage rate reaches 80%.</description>
    </item>
    
    <item>
      <title>Leetcode</title>
      <link>/posts/leetcode/</link>
      <pubDate>Fri, 13 Dec 2019 20:20:35 +0800</pubDate>
      
      <guid>/posts/leetcode/</guid>
      <description>最近花了不少時間寫 Leetcode，起源說起來很簡單，有個大學同學花了三年，每年都面試美國 FAAG 這幾間大公司，最近成功進入其中一間。
這故事聽起來很狗血，好像傳統教條「努力一定會成功」，但我得到啟發並不是這個。
如果一件事做起來很無聊又好像沒什麼成效，做失敗還會有心理上挫敗，那麼一般情況下人會想做嗎？很大概率是不會吧，就像讀書這種事，出了學校之後很少有人會願意再這麼做了，很大一部份原因在於很難看到成效，世界上還沒有一種評量方式能知道一個人在知識、認知領域到底有多少進步。
那回過頭來，如果有人能做這件事，而且還持續不懈的做，那麼原因是什麼呢？自虐？無聊？我想，要不代表這個人有辦法在這件事裡面找到成就，或是因為這個人能用長遠眼光自律努力。
不論那個原因，背後代表的都是與眾不同，這也是我覺得這件事難的地方。
辜且不論 Leetcode 對於寫程式有多少幫助，或是在這個時代進入大公司到底是不是一個好選擇，如果一個人能持續努力提升，那麼在任何領域應該都能有不錯表現。
所以我最近也開始刷題，主要目的並不是為了進公司（如果能進也很好），主要還是為了養成自己持續精進習慣，在實際生活中實踐我所知道的道理。
這一兩個月寫的結果，是更深一層的體會到寫這些題目對於訓練自己思考很有幫助，而且也讓自己無懼於寫程式。雖然聽起來有點好笑，一個以寫程式為生的人怎麼會懼於寫程式？但事實上，透過這些訓練，讓我對寫出來的程式更有信心。
要寫多久呢？不曉得，至少最近幾個月會是我的主要目標，希望能有更多的收穫。</description>
    </item>
    
  </channel>
</rss>